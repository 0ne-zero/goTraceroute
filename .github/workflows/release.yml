name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # --- OS-SPECIFIC DEPENDENCIES ---
      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      - name: Install ARM64 cross-compiler on Linux
        if: runner.os == 'Linux' && matrix.goarch == 'arm64'
        run: sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: brew install libpcap

      - name: Download and extract Npcap SDK on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://nmap.org/npcap/dist/npcap-sdk-1.13.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "npcap-sdk"

      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      # --- BUILD STEPS ---
      - name: Build binary (Unix)
        if: runner.os != 'Windows'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          # *** THIS IS THE FIX ***
          # Only set the CC for Linux ARM64 cross-compilation. macOS handles this natively.
          CC: ${{ runner.os == 'Linux' && matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
        run: |
          mkdir -p dist
          OUT="gotraceroute-${TAG_NAME}-${GOOS}-${GOARCH}"
          go build -ldflags="-s -w" -o "dist/$OUT" ./cmd/gotraceroute.go

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CGO_CFLAGS: "-I${{ github.workspace }}\\npcap-sdk\\Include"
          CGO_LDFLAGS: "-L${{ github.workspace }}\\npcap-sdk\\Lib\\${{ matrix.goarch }} -lwpcap"
        run: |
          New-Item -ItemType Directory -Path "dist" -Force
          $out = "gotraceroute-${env:TAG_NAME}-${env:GOOS}-${env:GOARCH}.exe"
          go build -ldflags="-s -w" -o "dist\$out" ./cmd/gotraceroute.go
      
      # --- CHECKSUM & UPLOAD ---
      - name: Generate checksum (Unix)
        if: runner.os != 'Windows'
        run: |
          cd dist
          shasum -a 256 * > checksums.txt

      - name: Generate checksum (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd dist
          Get-FileHash * -Algorithm SHA256 | Format-Table -HideTableHeaders | Out-File -FilePath checksums.txt
          (Get-Content checksums.txt) | ForEach-Object { $_.Trim() -replace '\s+', '  ' } | Set-Content checksums.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files (for debugging)
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Prebuilt binaries and checksums for Linux, macOS, and Windows.
          files: dist/**/*