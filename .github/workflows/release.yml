name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          # AMD64 (x86_64) runners
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - os: macos-latest
            goos: darwin
            goarch: amd64
            runner: macos-latest
          - os: windows-latest
            goos: windows
            goarch: amd64
            runner: windows-latest
          # ARM64 native build for macOS
          - os: macos-latest
            goos: darwin
            goarch: arm64
            runner: macos-14 # Apple Silicon (M1/M2) runner

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Install native libpcap dependencies
      - name: Install dependencies on Linux
        if: matrix.goos == 'linux'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      - name: Install dependencies on macOS
        if: matrix.goos == 'darwin'
        run: brew install libpcap

      - name: Download and extract Npcap SDK on Windows
        if: matrix.goos == 'windows'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://nmap.org/npcap/dist/npcap-sdk-1.13.zip" -OutFile "npcap-sdk.zip"
          Expand-Archive -Path "npcap-sdk.zip" -DestinationPath "npcap-sdk"
          
      # Build for Unix (Linux & macOS)
      - name: Build binary (Unix)
        if: matrix.goos != 'windows'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          mkdir -p dist
          OUT="gotraceroute-${GOOS}-${GOARCH}"
          go build -ldflags="-s -w" -o "dist/$OUT" ./cmd/gotraceroute.go
          
      # Build for Windows
      - name: Build binary (Windows)
        if: matrix.goos == 'windows'
        shell: pwsh
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CGO_CFLAGS: "-I${{ github.workspace }}\\npcap-sdk\\Include"
          CGO_LDFLAGS: "-L${{ github.workspace }}\\npcap-sdk\\Lib\\x64 -lwpcap"
        run: |
          New-Item -ItemType Directory -Path "dist" -Force
          $out = "gotraceroute-${env:GOOS}-${env:GOARCH}.exe"
          go build -ldflags="-s -w" -o "dist\$out" ./cmd/gotraceroute.go
          
      - name: Generate checksums (Unix)
        if: matrix.goos != 'windows'
        run: |
          cd dist
          for file in *; do
            shasum -a 256 "$file" > "${file}.sha256"
          done   
      
      - name: Generate checksums (Windows)
        if: matrix.goos == 'windows'
        shell: pwsh
        run: |
          cd dist
          Get-ChildItem -File | ForEach-Object {
            $hash = Get-FileHash $_.Name -Algorithm SHA256
            "$($hash.Hash.ToLower())  $($_.Name)" | Out-File -Encoding ascii "$($_.Name).sha256"
          }
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files (for debugging)
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Prebuilt binaries and per-OS checksums for Linux, macOS, and Windows.
          files: dist/**/*